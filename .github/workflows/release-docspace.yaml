name: Release DocSpace

run-name: "Release Docker-DocSpace ${{ github.event.inputs.release_version }}"

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'hub.docker repo owner (ex. onlyoffice)'
        type: string
        required: true
        default: 'onlyoffice'
      release_version:
        type: string
        description: 'Tag for stable release (ex. 2.5.1.1)'
        required: true
      source_version:
        type: string
        description: '4testing tag from which the release will be created (ex. 2.5.1.2678)'
        required: true
   
jobs:
  docker-release:
    uses: ONLYOFFICE/DocSpace-buildtools/.github/workflows/reusable-docspace-release.yaml@master
    with:
      repo: ${{ github.event.inputs.repo }}
      release_version: ${{ github.event.inputs.release_version }}
      source_version: ${{ github.event.inputs.source_version }}
    secrets:
      docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
      docker-usertoken: ${{ secrets.DOCKERHUB_TOKEN }}
  
  trigger-offline-release:
    needs: docker-release
    if: ${{ needs.docker-release.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Docker Hub tag to appear
        shell: bash
        env:
          DOCKER_TAG: ${{ github.event.inputs.release_version }}
        run: |
          SERVICES=$(curl -sSL "https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/install/docker/build.yml" | \
            docker compose -f- config | grep -oP 'image: [^/]*/-?\K[^:]+')

          PIDS=()
          for SVC in ${SERVICES}; do
            ( curl -sf "https://hub.docker.com/v2/repositories/${{ github.event.inputs.repo }}/${SVC}/" || { echo "::error::[FAIL]    $SVC  (repo not found)"; exit 1; }
              timeout 300 bash -c "until curl -sf -o /dev/null -w '%{http_code}' \
                https://hub.docker.com/v2/repositories/${{ github.event.inputs.repo }}/${SVC}/tags/${{ env.DOCKER_TAG }}/ \
                | grep -q 200; do sleep 10; done" \
              && echo "[OK]      ${SVC}" || { echo "::error::[FAIL]    ${SVC}"; exit 1; }
            ) &
            PIDS+=( "$!" )
          done

          for PID in "${PIDS[@]}"; do wait "$PID" || ERROR=1; done
          [ "${ERROR:-0}" -gt 0 ] && { echo "::error::[FAIL] Some images didn't appear or repo not found" >&2; exit 1; }
          echo "[OK]      All images are available."

      - name: Trigger offline release
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          gh workflow run "offline-release.yml" --repo "${{ github.repository }}" --ref "${{ github.ref_name }}" --field trigger=true
