name: Build packages

on:
  push:
    branches:
      - 'release/**'
      - 'hotfix/**'
      - 'develop'
    paths:
      - '.github/workflows/build_packages.yml'
  workflow_dispatch:
    inputs:
      branch-buildtools:
        description: 'Branch for buildtools repository'
        required: true
        default: 'develop'
      branch-client:
        description: 'Branch for client repository'
        required: true
        default: 'develop'
      branch-server:
        description: 'Branch for server repository'
        required: true
        default: 'develop'
      deb_build:
        description: 'Trigger DEB build'
        default: 'true'
      rpm_build:
        description: 'Trigger RPM build'
        default: 'true'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  PRODUCT: "DocSpace"
  PRODUCT_LOW: "docspace"
  BUILD_NUMBER: ${{ github.run_number }}
  PACKAGE_DIRECTORY: "${{ github.workspace }}"
  BRANCH_BUILDTOOLS: ${{ github.event.inputs.branch-buildtools || github.ref_name || 'develop' }}
  BRANCH_CLIENT: ${{ github.event.inputs.branch-client || github.ref_name || 'develop' }}
  BRANCH_SERVER: ${{ github.event.inputs.branch-server || github.ref_name || 'develop' }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      build_all: ${{ steps.changes.outputs.build_all }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed
        id: changes
        run: |
          git fetch --no-tags --prune --depth=2
          echo "build_all=$(git diff --name-only HEAD~1 HEAD | grep -qE 'build_packages.yml' && echo true)" >> $GITHUB_OUTPUT
      - name: Set matrix
        id: set-matrix
        run: |
          package_types=()
          if [[ "${{ steps.changes.outputs.build_all }}" == "true" ]]; then
            package_types=("deb" "rpm")
          else
            [[ "${{ github.event.inputs.deb_build }}" == "true" ]] && package_types+=("deb")
            [[ "${{ github.event.inputs.rpm_build }}" == "true" ]] && package_types+=("rpm")
          fi
          [[ ${#package_types[@]} -eq 0 ]] && exit 0
          matrix=$(printf '%s\n' "${package_types[@]}" | jq -R . | jq -sc '{include: map({packageType: .})}')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT  
  build:
    name: Build Packages
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set product version
        run: |
          PRODUCT_VERSION=$(grep -oP '\d+\.\d+\.\d+' <<< "${BRANCH_BUILDTOOLS//\//} ${BRANCH_CLIENT//\//} \
          ${BRANCH_SERVER//\//}" | head -n1)
          echo "PRODUCT_VERSION=${PRODUCT_VERSION:-3.1.1}" >> $GITHUB_ENV

      - name: Free Disk Space
        run: |
          curl -fsSL https://raw.githubusercontent.com/apache/arrow/refs/heads/main/ci/scripts/util_free_space.sh | bash
          sudo docker image prune --all --force

      - name: Import GPG
        uses: crazy-max/ghaction-import-gpg@v6
        id: gpg_step
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PRIVATE_KEY_PASS }}

      - name: Prepare build
        run: |
          wget -O - https://dl.yarnpkg.com/debian/pubkey.gpg | \
          sudo gpg --no-default-keyring --keyring gnupg-ring:/usr/share/keyrings/yarnkey.gpg --import
          sudo chmod 644 /usr/share/keyrings/yarnkey.gpg
          echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian/ stable main" | \
          sudo tee /etc/apt/sources.list.d/yarn.list
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo bash -
          sudo apt install -y dotnet-sdk-9.0 yarn nodejs rename unzip maven openjdk-21-jdk-headless
          JAVA_PATH=$(find /usr/lib/jvm/ -name "java" -path "*java-${JAVA_VERSION}*" | head -1)
          sudo update-alternatives --install /usr/bin/java java "$JAVA_PATH" 100 && sudo update-alternatives --set java "$JAVA_PATH"
          echo "JAVA_HOME=$(dirname $(dirname "$JAVA_PATH"))" >> $GITHUB_ENV
          sudo npm install -g json
          if [[ "${{ matrix.packageType }}" == "rpm" ]]; then
            sudo apt install -y python3-rpm python3-pip
            sudo pip install rpmlint
          else
            sudo apt install -y dpkg-sig lintian dh-make
          fi

      - name: Download sources
        run: |
          case "${{ matrix.packageType }}" in
            deb) SOURCE_DIR="${PACKAGE_DIRECTORY}/install/${{ matrix.packageType }}/debian/source" ;;
            rpm) SOURCE_DIR="${PACKAGE_DIRECTORY}/install/${{ matrix.packageType }}/SPECS/SOURCES" ;;
          esac
          download() { wget -q -O "${SOURCE_DIR}/$3.tar.gz" "https://github.com/ONLYOFFICE/$1/archive/$2.tar.gz" && echo -e "\e[32m[OK] $3\e[0m" || echo -e "\e[31m[FAILED] $3\e[0m"; }
          download "$PRODUCT-buildtools"  "$BRANCH_BUILDTOOLS"      buildtools &
          download "$PRODUCT-client"      "$BRANCH_CLIENT"          client &
          download "$PRODUCT-server"      "$BRANCH_SERVER"          server &
          download "document-templates"   "main/community-server"   DocStore &
          download "ASC.Web.Campaigns"    "master"                  campaigns &
          download "$PRODUCT-plugins"     "master"                  plugins &
          wait

      - name: Build DEB Packages
        if: matrix.packageType == 'deb'
        run: |
          cd ${PACKAGE_DIRECTORY}/install/deb/
          rename -f -v "s/product([^\/]*)$/${PRODUCT_LOW}\$1/g" debian/*
          find debian/ -type f -exec sed -i "s/{{product}}/${PRODUCT_LOW}/g" {} ';'
          sed -i "s/{{package_header_tag_version}}/${PRODUCT_VERSION}.${BUILD_NUMBER}/g" debian/changelog debian/control
          export DEB_BUILD_OPTIONS="parallel=$(nproc)"
          dpkg-buildpackage -uc -us

      - name: Build RPM Packages
        if: matrix.packageType == 'rpm'
        run: |
          cd ${PACKAGE_DIRECTORY}/install/rpm/SPECS
          mv ./SOURCES/product.rpmlintrc ./SOURCES/${PRODUCT_LOW}.rpmlintrc
          sed -i -e '/BuildRequires/d' product.spec
          rpmbuild -D "packager Ascensio System SIA <support@onlyoffice.com>" \
                   -D "_topdir $(pwd)" \
                   -D "version ${PRODUCT_VERSION}" \
                   -D "release ${BUILD_NUMBER}" -ba product.spec

      - name: Sign DEB Packages
        if: matrix.packageType == 'deb'
        run: |
          dpkg-sig --sign origin \
            --gpg-options "--pinentry-mode loopback --passphrase ${{ secrets.GPG_PRIVATE_KEY_PASS }}" \
            --batch ${PACKAGE_DIRECTORY}/install/*.deb

      - name: Sign RPM Packages
        if: matrix.packageType == 'rpm'
        run: |
          gpg --export --armor > gpgkey.pub && rpm --import gpgkey.pub
          rpm -D "__gpg /usr/bin/gpg" \
              -D "_gpg_path $HOME/.gnupg" \
              -D "_gpg_name ${{ secrets.GPG_KEY_NAME }}" \
              -D "_gpg_sign_cmd_extra_args --pinentry-mode loopback --passphrase ${{ secrets.GPG_PRIVATE_KEY_PASS }}" \
              --addsign ${PACKAGE_DIRECTORY}/install/rpm/SPECS/RPMS/noarch/*.rpm 

      - name: Upload DEB Packages
        if: matrix.packageType == 'deb'
        run: |
          find "${PACKAGE_DIRECTORY}/install" -name "*.${{ matrix.packageType }}" | xargs -P4 -I{} bash -c '
            curl -sS --fail --retry 10 --retry-delay 10 --connect-timeout 60 --max-time 180 -H "Content-Type: multipart/form-data" \
              -u "${{ secrets.REPO_LOGIN }}:${{ secrets.REPO_PASS }}" --data-binary "@$1" "${{ secrets.REPO_URL_4TESTING_DEB }}" \
            && echo -e "\e[32m[Success] $(basename "$1")\e[0m" || echo "::warning:: [Uploading errors] $(basename "$1")"' _ {}

      - name: Upload RPM Packages
        if: matrix.packageType == 'rpm'
        run: |
          find "${PACKAGE_DIRECTORY}/install/rpm/SPECS/RPMS/noarch" -name "*.${{ matrix.packageType }}" | xargs -P4 -I{} bash -c '
            curl -sS --fail --retry 10 --retry-delay 10 --connect-timeout 60 --max-time 180 \
              -u "${{ secrets.REPO_LOGIN }}:${{ secrets.REPO_PASS }}" --upload-file "$1" "${{ secrets.REPO_URL_4TESTING_RPM}}/$(basename $1)" \
            && echo -e "\e[32m[Success] $(basename "$1")\e[0m" || echo "::warning:: [Uploading errors] $(basename "$1")"' _ {}

      - name: Checking the DEB package for errors
        if: matrix.packageType == 'deb'
        run: |
          for deb in ${PACKAGE_DIRECTORY}/install/*.deb; do
            lintian --profile debian "$deb" > "${deb}.lintian" 2>&1 &
          done
          wait
          cat ${PACKAGE_DIRECTORY}/install/*.lintian | tee LINTIAN
          if grep -qE '^(W:|E:)' LINTIAN; then
            echo "::warning Noticedeb=lintian::$(cat LINTIAN | awk '/^W:/ { ws += 1 } /^E:/ { es += 1 } END { print "Warnings:", ws, "Errors:", es }')"
          fi

      - name: Checking the RPM package for errors
        if: matrix.packageType == 'rpm'
        run: |
          for rpm_package in ${PACKAGE_DIRECTORY}/install/rpm/SPECS/RPMS/noarch/*.rpm; do
            rpmlint --ignore-unused-rpmlintrc --rpmlintrc ${PACKAGE_DIRECTORY}/install/rpm/SPECS/SOURCES/${PRODUCT_LOW}.rpmlintrc $rpm_package | tee -a RPM_LINT
          done
          if grep -qE '(W:|E:)' RPM_LINT; then
            echo "::warning Noticerpm=rpmlint::$(cat RPM_LINT | awk '/W:/ { ws += 1 } /E:/ { es += 1 } END { print "Warnings:", ws, "Errors:", es }')"
          fi
      
  trigger_oci:
    name: Trigger ci-oci-install Workflow
    needs: [prepare, build]
    runs-on: ubuntu-22.04
    if: ${{ success() }}
    steps:
      - name: Trigger CI-OCI-Install Workflow
        run: |
          deb_build="${{ github.event.inputs.deb_build }}" rpm_build="${{ github.event.inputs.rpm_build }}"
          [[ "${{ needs.prepare.outputs.build_all }}" == "true" ]] && deb_build="true" && rpm_build="true"
          
          gh api --method POST /repos/${{ github.repository }}/actions/workflows/85067971/dispatches \
            -f ref='${{ github.ref_name }}' \
            -f inputs[deb_build]="${deb_build}" \
            -f inputs[rpm_build]="${rpm_build}"
