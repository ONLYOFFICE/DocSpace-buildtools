name: Install OneClickInstall DocSpace

on:
  schedule:
    - cron: '00 20 * * 0'

  workflow_dispatch:
    inputs:
      os:
        description: Select distros (only without deb/rpm flags)
        default: |
          debian11,
          debian12,
          ubuntu2204,
          ubuntu2404,
          rhel9,
          centos9s,
          fedora41,
          fedora42
      deb_build:
        type: boolean
        description: "Run tests on DEB-based distros"
        default: true
      rpm_build:
        type: boolean
        description: "Run tests on RPM-based distros"
        default: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix names
        id: set-matrix
        env:
          OS_MAP: |
            {
              "rhel9":      ["RHEL 9",       "generic",      "rhel9"],
              "centos9s":   ["CentOS 9s",    "onlyoffice",   "base-centos9s"],
              "debian11":   ["Debian 11",    "onlyoffice",   "base-debian11"],
              "debian12":   ["Debian 12",    "onlyoffice",   "base-debian12"],
              "ubuntu2204": ["Ubuntu 22.04", "onlyoffice",   "base-ubuntu2204"],
              "ubuntu2404": ["Ubuntu 24.04", "onlyoffice",   "base-ubuntu2404"],
              "fedora41":   ["Fedora 41",    "onlyoffice",   "base-fedora41"],
              "fedora42":   ["Fedora 42",    "onlyoffice",   "base-fedora42"]
            }
        run: |
          OS_INPUT="${{ github.event.inputs.os }}"
          declare -A os_set=()
          if [[ "${{ github.event.inputs.deb_build }}" != "true" && "${{ github.event.inputs.rpm_build }}" != "true" ]]; then
            for os in ${OS_INPUT//,/ }; do
              os_trimmed="$(echo "$os" | xargs)"
              [[ -n "$os_trimmed" ]] && os_set["$os_trimmed"]=1
            done
          fi

          [[ "${{ github.event.inputs.deb_build }}" == "true" ]] && \
            for os in $(jq -r 'to_entries[] | select(.value[0] | test("Debian|Ubuntu")) | .key' <<< "$OS_MAP"); do os_set["$os"]=1; done

          [[ "${{ github.event.inputs.rpm_build }}" == "true" ]] && \
            for os in $(jq -r 'to_entries[] | select(.value[0] | test("CentOS|Fedora|RHEL")) | .key' <<< "$OS_MAP"); do os_set["$os"]=1; done

          matrix=$(jq -c -n --argjson map "$OS_MAP" --argjson list "$(printf '%s\n' "${!os_set[@]}" | sort -u | jq -R . | jq -s .)" \
            '{include: $list | map({name:  $map[.][0],os:    ($map[.][2] // .),distr: $map[.][1]})}')

          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  vagrant-up:
    name: "Test DocSpace with ${{ matrix.name}}"
    runs-on: ubuntu-22.04
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.prepare.outputs.matrix)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: "Checking scripts for errors"
        run: |
          set -eux
          sudo apt-get install -y shellcheck
          find install/OneClickInstall tests -type f -name "*.sh" ! -path "install/OneClickInstall/install-Docker.sh" \
            | xargs shellcheck --exclude="$(awk '!/^#|^$/ {print $1}' tests/lint/sc_ignore | paste -sd ",")" --severity=warning | tee sc_output
          awk '/\(warning\):/ {w++} /\(error\):/ {e++} END {if (w+e) printf "::warning ::ShellCheck detected %d warnings and %d errors\n", w+0, e+0}' sc_output

      - name: Get update and install vagrant
        run: |
          set -eux
          wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo gpg --dearmor -o /usr/share/keyrings/virtualbox.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/virtualbox.gpg] https://download.virtualbox.org/virtualbox/debian $(. /etc/os-release && echo $UBUNTU_CODENAME) contrib" | sudo tee /etc/apt/sources.list.d/virtualbox.list
          sudo wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          sudo echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update -y
          sudo apt install vagrant virtualbox-7.0 -y

      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/local/lib/android /opt/ghc
          sudo docker image prune --all --force

      - name: "Test production scripts with ${{matrix.name}}"
        if: ${{ github.event_name == 'schedule' }}
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 80
          retry_on: error
          command: |
            set -eux
            cd tests/vagrant
            TEST_CASE='--production-install' \
            DISTR='${{ matrix.distr }}' \
            OS='${{ matrix.os }}' \
            DOWNLOAD_SCRIPT='-ds true' \
            RAM='8192' \
            CPU='3' \
            ARGUMENTS="-arg '--skiphardwarecheck true'" \
            vagrant up --provider=virtualbox
          on_retry_command: |
            echo "RUN CLEAN UP: Destroy vagrant and one more try"
            cd tests/vagrant
            sleep 10
            vagrant destroy --force

      - name: "Test Local scripts with ${{matrix.name}}"
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 80
          retry_on: error
          command: |
            set -eux
            cd tests/vagrant
            TEST_CASE='--local-install' \
            DISTR='${{ matrix.distr }}' \
            OS='${{matrix.os}}' \
            RAM='8192' \
            CPU='3' \
            DOWNLOAD_SCRIPT='-ds false' \
            TEST_REPO='-tr true' \
            ARGUMENTS="-arg '--skiphardwarecheck true --localscripts true'" \
            vagrant up --provider=virtualbox
          on_retry_command: |
            echo "RUN CLEAN UP: Destroy vagrant and one more try"
            cd tests/vagrant
            sleep 10
            vagrant destroy --force
