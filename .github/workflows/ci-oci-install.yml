name: Install OneClickInstall DocSpace

on:
  schedule:
    - cron: '00 20 * * 0'

  workflow_dispatch:
    inputs:
      centos9s:
         type: boolean
         description: 'CentOS 9 Stream'
         default: true
      debian12:
         type: boolean
         description: 'Debian 12'
         default: true
      debian11:
         type: boolean
         description: 'Debian 11'
         default: true
      ubuntu2204:
         type: boolean
         description: 'Ubuntu 22.04'
         default: true
      ubuntu2404:
          type: boolean
          description: 'Ubuntu 24.04'
          default: true
      fedora40:
         type: boolean
         description: 'Fedora 40'
         default: true
      fedora41:
        type: boolean
        description: 'Fedora 41'
        default: true
      deb_build:
        type: boolean
        description: "Run tests on DEB-based distros"
        default: true
      rpm_build:
        type: boolean
        description: "Run tests on RPM-based distros"
        default: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine affected distributions
        id: determine-distros
        if: github.event_name == 'pull_request'
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          echo "debian_changed=$(echo "$CHANGED_FILES" | grep -q 'install-Debian' && echo true || echo false)" >> $GITHUB_ENV
          echo "redhat_changed=$(echo "$CHANGED_FILES" | grep -q 'install-RedHat' && echo true || echo false)" >> $GITHUB_ENV 

      - name: Set matrix names
        id: set-matrix
        run: |
          matrix=$(echo '{
            "include": [
              {"execute": '${{ github.event.inputs.centos9s || true }}', "name": "CentOS9s", "os": "base-centos9s", "distr": "onlyoffice"},
              {"execute": '${{ github.event.inputs.debian12 || true }}', "name": "Debian12", "os": "base-debian12", "distr": "onlyoffice"},
              {"execute": '${{ github.event.inputs.debian11 || true }}', "name": "Debian11", "os": "base-debian11", "distr": "onlyoffice"},
              {"execute": '${{ github.event.inputs.ubuntu2204 || true }}', "name": "Ubuntu22.04", "os": "base-ubuntu2204", "distr": "onlyoffice"},
              {"execute": '${{ github.event.inputs.ubuntu2404 || true }}', "name": "Ubuntu24.04", "os": "base-ubuntu2404", "distr": "onlyoffice"},
              {"execute": '${{ github.event.inputs.fedora40 || true }}', "name": "Fedora40", "os": "base-fedora40", "distr": "onlyoffice"},
              {"execute": '${{ github.event.inputs.fedora41 || true }}', "name": "Fedora41", "os": "base-fedora41", "distr": "onlyoffice"}
            ]
          }')            
        
          matrix=$(echo "$matrix" | jq -c --argjson debuild "${{ github.event.inputs.deb_build || true }}" --argjson rpmbuild "${{ github.event.inputs.rpm_build || true }}" '
            { include: [ .include[] | select(
                  ($debuild and (.name | test("Debian|Ubuntu"))) or
                  ($rpmbuild and (.name | test("CentOS|Fedora")))
                )
            ] }')
        
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            matrix=$(echo "$matrix" | jq -c --arg REDHAT_CHANGED "${{ env.redhat_changed }}" --arg DEBIAN_CHANGED "${{ env.debian_changed }}" '
              { include: [ .include[] | select(
                    ($REDHAT_CHANGED == $DEBIAN_CHANGED and .execute == true) or
                    ($REDHAT_CHANGED == "true" and (.name | test("CentOS|Fedora"))) or
                    ($DEBIAN_CHANGED == "true" and (.name | test("Debian|Ubuntu")))
                  )
              ] }')
          fi
        
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  vagrant-up:
    name: "Test DocSpace with ${{ matrix.name}}"
    runs-on: ubuntu-24.04
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.prepare.outputs.matrix)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: "Checking scripts for errors"
        run: |
          set -eux
          sudo apt-get install -y shellcheck
          find install/OneClickInstall tests -type f -name "*.sh" ! -path "install/OneClickInstall/install-Docker.sh" \
            | xargs shellcheck --exclude="$(awk '!/^#|^$/ {print $1}' tests/lint/sc_ignore | paste -sd ",")" --severity=warning | tee sc_output
          awk '/\(warning\):/ {w++} /\(error\):/ {e++} END {if (w+e) printf "::warning ::ShellCheck detected %d warnings and %d errors\n", w+0, e+0}' sc_output

      - name: Set up Python 3.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Get update and install vagrant
        run: |
          set -eux
          sudo wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          sudo echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update -y
          sudo apt install vagrant virtualbox -y

      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/local/lib/android /opt/ghc
          sudo docker image prune --all --force

      - name: "Test production scripts with ${{matrix.name}}"
        if: ${{ github.event_name == 'schedule' }}
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 80
          retry_on: error
          command: |
            set -eux
            cd tests/vagrant
            TEST_CASE='--production-install' \
            DISTR='${{ matrix.distr }}' \
            OS='${{ matrix.os }}' \
            DOWNLOAD_SCRIPT='-ds true' \
            RAM='8192' \
            CPU='3' \
            ARGUMENTS="-arg '--skiphardwarecheck true'" \
            vagrant up --provider=virtualbox
          on_retry_command: |
            echo "RUN CLEAN UP: Destroy vagrant and one more try"
            cd tests/vagrant
            sleep 10
            vagrant destroy --force

      - name: "Test Local scripts with ${{matrix.name}}"
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
        uses: nick-fields/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 80
          retry_on: error
          command: |
            set -eux
            cd tests/vagrant
            TEST_CASE='--local-install' \
            DISTR='${{ matrix.distr }}' \
            OS='${{matrix.os}}' \
            RAM='8192' \
            CPU='3' \
            DOWNLOAD_SCRIPT='-ds false' \
            TEST_REPO='-tr true' \
            ARGUMENTS="-arg '--skiphardwarecheck true --localscripts true'" \
            vagrant up --provider=virtualbox
          on_retry_command: |
            echo "RUN CLEAN UP: Destroy vagrant and one more try"
            cd tests/vagrant
            sleep 10
            vagrant destroy --force
