name: "<reusable> DocSpace build action"

on:
  workflow_call:
    inputs:
      payload-branches:
        description: "Branches for build in json format"
        required: true
        type: string
      dispatch-type:
        description: "Dispatch-type, that trigger workflow"
        required: true
        type: string
      custom-build-commands:
        description: "Add custom commands for RUN in Dockerfile"
        required: false
        type: string
        default: "echo placeholder"
      dockerhub-repo:
        description: "Set hub.docker repo owner that will be used for push images"
        required: true
        type: string
        default: onlyoffice
    secrets:
      docker-username:
        required: true
        description: "hub.docker username"
      docker-usertoken:
        description: "hub.docker user token"
        required: true
      git-token:
        description: "git token for zap scanner"
        required: false

env:
  DOCKER_PATH: "install/docker"
  REPO: "${{ inputs.dockerhub-repo }}"
  DOCKER_IMAGE_PREFIX: "4testing-docspace"
  DOCKERFILE: "Dockerfile.app"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs: 
      branches: ${{ steps.prepare.outputs.branches }}
    steps:
      - name: prepare branches
        id: prepare
        run: |
          branches_array=(${{ inputs.payload-branches }})
          echo "branches=$(jq -c -n '$ARGS.positional' --args "${branches_array[@]}")" >> "$GITHUB_OUTPUT"

  build:
    needs: 'prepare'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64]
        branch: ${{ fromJSON(needs.prepare.outputs.branches) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}
          repository: 'ONLYOFFICE/DocSpace-buildtools'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/local/lib/android /opt/ghc
          sudo docker image prune --all --force

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-usertoken }}
          
      - name: Build 4testing
        id: build
        working-directory: ${{ env.DOCKER_PATH }}
        env:
          BUILD_NUMBER: ${{ github.run_number }}
          PLATFORM: ${{ matrix.platform }}
          BRANCH: ${{ matrix.branch }}
        run: |
          if [ "${{ matrix.branch }}" = "develop" ]; then
            PRODUCT_VERSION="develop"
            DOCKER_TAG=${PRODUCT_VERSION}.${BUILD_NUMBER}
          else
            PRODUCT_VERSION=$(echo "${{ matrix.branch }}" | sed '/^release\b\|^hotfix\b\|^feature\b/s/release.*\/\|hotfix.*\/\|feature.*\///; s/-git-action$//; s/^v//') 
            DOCKER_TAG=${PRODUCT_VERSION}.${BUILD_NUMBER}
          fi
          export DOCKER_TAG
          docker buildx bake -f build.yml \
          --set *.args.CUSTOM_BUILD_COMMANDS='${{ inputs.custom-build-commands }}' \
          --set *.args.GIT_BRANCH=${BRANCH} \
          --set *.args.PRODUCT_VERSION=${PRODUCT_VERSION} \
          --set *.args.BUILD_NUMBER=${BUILD_NUMBER} \
          --set *.platform=${PLATFORM} \
          --push

          echo "version=${DOCKER_TAG}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Run zap action if needed
        if: >
           inputs.dispatch-type == 'cron-trigger-action' && 
           github.repository == 'ONLYOFFICE/DocSpace-buildtools'
        env:
          GITHUB_TOKEN: ${{ secrets.git-token }}
          VERSION: ${{ steps.build.outputs.version }}
        shell: bash
        run: |
           if [[ ${{ matrix.branch }} =~ release || ${{ matrix.branch }} =~ hotfix ]]; then
              gh workflow run zap-scan.yaml \
                 --repo ONLYOFFICE/DocSpace \
                 -f branch=${{ matrix.branch }} \
                 -f version=${VERSION}
           fi
