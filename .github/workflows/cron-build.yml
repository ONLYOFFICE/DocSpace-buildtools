name: 4testing multiarch-build

on:
  schedule:
    - cron: '0 20 * * *' 
env:
  DOCKER_PATH: "/install/docker"
  REPO: "onlyoffice"
  DOCKER_IMAGE_PREFIX: "4testing-docspace"
  DOCKERFILE: "Dockerfile.app"

jobs:

  select-branches:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: List Branches
        id: list-branches
        run: |
          all_branches=$(git branch -a --format="%(refname:short)"|sed -e "s/^origin\///")
          matching_branches=""

          for branch in $all_branches; do
            if [[ $branch =~ ^release/v[0-9]+ || $branch =~ ^hotfix/v[0-9]+ || $branch == "develop" ]]; then
              matching_branches="${matching_branches},\"${branch}\""
            fi
          done
        
          matching_branches=${matching_branches#,}
          echo "json_output=[${matching_branches}]" >> $GITHUB_OUTPUT
    outputs:
      selected-branches: ${{ steps.list-branches.outputs.json_output }}


  build:
    needs: select-branches
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.build.outputs.tag }}
      branch: ${{ steps.build.outputs.branch }}
    strategy:
      matrix:
        platform: [linux/amd64]
        branch: ${{ fromJson(needs.select-branches.outputs.selected-branches) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ matrix.branch }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/local/lib/android /opt/ghc
          sudo docker image prune --all --force

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build 4testing
        id: build
        run: |
          cd .${DOCKER_PATH}
          if [ "${{ matrix.branch }}" = "develop" ]; then
            DOCKER_TAG="develop.${{ github.run_number }}"
          else
            DOCKER_TAG=$(echo "${{ matrix.branch }}" | sed '/^release\b\|^hotfix\b\|^feature\b/s/release.*\/\|hotfix.*\/\|feature.*\///; s/-git-action$//; s/^v//').${{github.run_number}}
          fi

          if [[ ${{ matrix.branch }} =~ release ]]; then
            # Move build tag to output for use it with zap scanning for non-develop branches
            echo "tag=${DOCKER_TAG}" >> "$GITHUB_OUTPUT"
            echo "branch=${{ matrix.branch }}" >> "$GITHUB_OUTPUT"
          fi
          export DOCKER_TAG

          docker buildx bake -f build.yml \
          --set *.args.GIT_BRANCH=${{ matrix.branch }} \
          --set *.platform=linux/amd64 \
          --push
        shell: bash

  zap:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    needs: [build]
    if: ${{ false }}
    # if: ${{ startsWith(needs.build.outputs.branch, 'release/') }}
    name: Scan DocSpace with zap
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run and prepare DocSpace
        id: run-ds
        env:
          DOCKER_TAG: ${{ needs.build.outputs.tag }}
          STATUS: "4testing-"
        run: |
           # Get gh-action runner local ip
           LOCAL_IP=$(hostname -I | awk '{print $1}')
           echo "local-ip=${LOCAL_IP}" >> "$GITHUB_OUTPUT"

           # Prepare context if needed
           #sed -i "s/%{ip}%/${LOCAL_IP}/g" ./DocSpace_context.context
           #cat ./DocSpace_context.context

           # Run 4testing DocSpace with tag from previous build
           cd ./install/OneClickInstall
           sudo printf "Y" | sudo bash ./docspace-install.sh docker -skiphc true --makeswap false --localscripts true -dsv ${DOCKER_TAG} -s ${STATUS}
           sleep 300

           # Get Wizzard token and pwd hash for complete wizzard
           WIZZARD_TOKEN=$(curl --request GET http://${LOCAL_IP}/api/2.0/settings | jq -r .response.wizardToken)
           PWD_HASH=$(curl --request GET http://${LOCAL_IP}/api/2.0/settings | jq -r .response.passwordHash.salt)
           EMAIL="example@mail.com"
           USER_PWD="test666pass"

           ## Complete wizard
           curl -v -D output.txt --request PUT -H "confirm: ${WIZZARD_TOKEN}" \
                                               -H "Accept: application/json" \
                                               -H "Content-Type: application/json" \
                                               --data '{"Email":"'"${EMAIL}"'","PasswordHash":"'"${PWD_HASH}"'"}' \
                                               http://${LOCAL_IP}/api/2.0/settings/wizard/complete

           # Get cookie and user-id
           COOKIE=$(cat ./output.txt | egrep -i asc_auth_key=* | cut -d '=' -f 2-) && COOKIE=${COOKIE%%;*}
           USER_ID=$(curl --request GET -H "Accept: application/json" \
                                        -H "Content-Type: application/json" \
                                        -H "Authorization: ${COOKIE}" \
                                        http://${LOCAL_IP}/api/2.0/people/email?email=${EMAIL} | jq -r .response.id)

           # Set new admin-user pwd
           curl -v --request PUT -H "Accept: application/json" \
                                 -H "Content-Type: application/json" \
                                 -H "Authorization: ${COOKIE}" \
                                 --data '{"Password":"'"${USER_PWD}"'"}' \
                                 "http://${LOCAL_IP}/api/2.0/people/${USER_ID}/password"

           # Get new admin-user auth-token and authenticate the user
           TOKEN=$(curl -v --request POST -H "Accept: application/json" \
                                  -H "Content-Type: application/json" \
                                  --data '{"userName":"'"${EMAIL}"'","password":"'"${USER_PWD}"'"}' \
                                  "http://${LOCAL_IP}/api/2.0/authentication" | jq -r .response.token)

           # Set new auth-token for zap header
           echo "ZAP_AUTH_HEADER_VALUE=${TOKEN}" >> "$GITHUB_ENV"

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://${{ steps.run-ds.outputs.local-ip }}/'
          cmd_options: '-j'

